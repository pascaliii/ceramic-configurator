/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 Model_Cup_2023_09_03.gltf -o Transformed_Model_Cup_2023_09_03 
*/

import React, { useEffect, useRef, useState } from 'react'
import { meshBounds, useGLTF } from '@react-three/drei'
import { useLoader } from '@react-three/fiber'
import * as THREE from 'three'
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'
import clays from '../data/clays'
import mattGlazes from '../data/mattGlazes'
import shinyGlazes from '../data/shinyGlazes'

export function Cup({ clay, glaze, glazePart }) {
  const { nodes, materials } = useGLTF('./models/Model_Cup_2023_10_04.gltf')

  const findSelectedGlaze = () => {
    let glazeMaterial
    if (mattGlazes.find((item) => item.value === glaze)) {
      glazeMaterial = mattGlazes.find((item) => item.value === glaze)
      return glazeMaterial
    }
    if (shinyGlazes.find((item) => item.value === glaze)) {
      glazeMaterial = shinyGlazes.find((item) => item.value === glaze)
      return glazeMaterial
    }
  }

  const findSelectedClay = () => {
    const clayMaterial = clays.find((item) => item.value === clay)
    return clayMaterial
  }

  const renderCup = () => {
    const clayMaterial = findSelectedClay()
    const glazeMaterial = findSelectedGlaze()
    let material

    switch (glazePart) {
      case 'Completely glazed':
        if (clay === 'Basic Beige') {
          material = materials[glazeMaterial?.basic]
        } else {
          material = materials[glazeMaterial?.spreckled]
        }

        return (
          <>
            <mesh
              geometry={nodes.CupBase.geometry}
              material={materials.Clay_Spreckled}
            />
            <mesh
              geometry={nodes.CupInner.geometry}
              material={material ?? materials.Clay_Spreckled}
            />
            <mesh
              geometry={nodes.CupTop.geometry}
              material={material ?? materials.Clay_Spreckled}
            />
            <mesh
              geometry={nodes.CupMiddle.geometry}
              material={material ?? materials.Clay_Spreckled}
            />
            <mesh
              geometry={nodes.CupBottom.geometry}
              material={material ?? materials.Clay_Spreckled}
            />
          </>
        )

        break

      case 'Half glazed':
        if (clay === 'Basic Beige') {
          material = materials[glazeMaterial?.basic]
        } else {
          material = materials[glazeMaterial?.spreckled]
        }

        return (
          <>
            <mesh
              geometry={nodes.CupBase.geometry}
              material={materials.Clay_Spreckled}
            />
            <mesh
              geometry={nodes.CupInner.geometry}
              material={material ?? materials.Clay_Spreckled}
            />
            <mesh
              geometry={nodes.CupTop.geometry}
              material={material ?? materials.Clay_Spreckled}
            />
            <mesh
              geometry={nodes.CupMiddle.geometry}
              material={material ?? materials.Clay_Spreckled}
            />
            <mesh
              geometry={nodes.CupBottom.geometry}
              material={materials.Clay_Spreckled}
            />
          </>)
          break

      case 'Only glazed inside':
        if (clay === 'Basic Beige') {
          material = materials[glazeMaterial?.basic]
        } else {
          material = materials[glazeMaterial?.spreckled]
        }

        return (
          <>
            <mesh
              geometry={nodes.CupBase.geometry}
              material={materials.Clay_Spreckled}
            />
            <mesh
              geometry={nodes.CupInner.geometry}
              material={material ?? materials.Clay_Spreckled}
            />
            <mesh
              geometry={nodes.CupTop.geometry}
              material={materials.Clay_Spreckled}
            />
            <mesh
              geometry={nodes.CupMiddle.geometry}
              material={materials.Clay_Spreckled}
            />
            <mesh
              geometry={nodes.CupBottom.geometry}
              material={materials.Clay_Spreckled}
            />
          </>
        )

        break

      default:
        return (
          <>
            <mesh
              geometry={nodes.CupBase.geometry}
              material={materials.Clay_Spreckled}
            />
            <mesh
              geometry={nodes.CupInner.geometry}
              material={materials.Clay_Spreckled}
            />
            <mesh
              geometry={nodes.CupTop.geometry}
              material={materials.Clay_Spreckled}
            />
            <mesh
              geometry={nodes.CupMiddle.geometry}
              material={materials.Clay_Spreckled}
            />
            <mesh
              geometry={nodes.CupBottom.geometry}
              material={materials.Clay_Spreckled}
            />
          </>
        )
        break
    }
  }

  return <group dispose={null}>{renderCup()}</group>
}

useLoader.preload(
  GLTFLoader,
  './models/Model_Cup_2023_10_04.gltf' /* extensions */
)
